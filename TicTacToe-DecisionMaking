
"""
Tic Tac Toe Player with Decison Making for Score Optmisation
"""
import math
import random
from custom_errors import InvalidActionError
from copy import deepcopy


X = "X"
O = "O"
EMPTY = None


def initial_state():
    """
    Starting state of the board.
    """
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]


def player(board):
    """
    Player who has the next turn on a board.
    """
    #count number of marks on the board, whoever has fewest marks (X, O) will have the next turn
    #define counting variables
    XCount = 0
    OCount = 0
# EmptySquareCount = 0

    #count X, O and empty on board by row
    for row in board:
        XCount = XCount + row.count(X)
        OCount += OCount +row.count(O)
#    EmptySquareCount += EmptySquareCount + row.count(EMPTY)

    #return player with next turn
    if XCount > OCount:
        return O
    else:
        return X

    raise NotImplementedError


def actions(board):
    """
    Set of all possible actions (i, j) available on the board.
    """
    # i (x direction) denotes rows
    # j (y direction) denotes columns  

    #when an empty spot is detected it is added to a tuple set, possibleactions

    PossibleActions = set()

    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                PossibleActions.add((i, j))

    return PossibleActions

#raise NotImplementedError

def result(board, action):
    """
    Board that results from making move (i, j) on the board.
    """

    #put action details into i and j variables for board coordinates
    i=action[0]
    j=action[1]

    #check to see if the action is valid
    if i not in [0, 1, 2] or j not in [0, 1, 2]:
        raise InvalidActionError(action, board, 'Move is not valid: ')
    elif board[i][j] != EMPTY:
      raise InvalidActionError(action, board, 'Result function tried to perform invalid action on occupaied tile: ')

    raise 

   # Copy the board then update the current player's move:
    Copy = deepcopy(board)
    Copy[i][j] = player(board)

    return board_copy

#raise NotImplementedError


def winner(board):
    """
    Determines winner of the game, if there is one.
    """
    #determine if the board in its current state is a winning board
    #if there is a winner, the name of the winner is returned (X or O)
    #if there is no winner, return None

    #examine rows
    for row in board:
        if row.count(X) == 3:
            return X
        if row.count(O) == 3:
            return O
    # examine columns
    for j in range(3):
        column = ''
        for i in range(3):
            column = column + str(board[i][j])
        
        if column == 'XXX':
            return X
        if column == 'OOO':
            return O
    #examine diagonals

    diag1 = ''
    diag2 = ''
    j = 2

    for i in range(3):
        diag1 = diag1 + str(board[i][i])
        diag2 = diag2 + str(board[i][j])
        j = j - 1

    if diag1 == 'XXX' or diag2 == 'XXX':
        return X
    elif diag1 == 'OOO' or diag2 == 'OOO':
        return O
    
    return None

#raise NotImplementedError


def terminal(board):
    """
    True if game is over, False otherwise.
    """
    #the game is over if there is a winner or if there are no possible moves

    if winner(board) or not actions(board):
        return True
    else:
        return False


#raise NotImplementedError

def utility(board):
    """
    Returns 1 if X has won the game, -1 if O has won, 0 otherwise.
    """
    #assign a point value to winner (1), loser (-1) or draw (0)

    if winner(board) == 'X':
        return 1
    elif winner(board) == 'O':
        return -1
    else:
        return 0

explored_actions = 0
#raise NotImplementedError

def minimax(board):
    """
    Optimal action for the current player on the board.
    """

# Score is in refrernce to X, so player X --> maximise, player O --> minimise
#implement functions for maximisation and for minimisation

    global explored_actions
    explored_actions = 0


#define function for player X to maximise score
#use alpha-beta pruing from lecture to reduce total exploration
#optimum_max is the best result 
    
    def max_player(board, low_min = 10):
        global explored_actions

      # check if game is over. if so, return point value of boars (1, -1, 0)

        if terminal(board):
            return (utility(board), None)


    #if game is still in play, pick action for X max value when O plays optmially
        val = -10
        bestact = None

    # from set of possible actions select one at random until list is empty
        actionset = actions(board)
    
        while len(actionset) > 0:
            action = random.choice(tuple(actionset))
            actionset.remove(action)


        # for pruning, skips if low result found
            if low_min <= val:
                break
            explored_actions = explored_actions +1
            #determine O player optimal
            minresult = min_player(result(board, action), val)
            if minresult[0] > val:
                bestact = action
                val = minresult[0]

        return (val, bestact)


    #define function for player O to minimise score
    #use alpha-beta pruing from lecture to reduce total exploration
    #optimum_min is the best result 
    def min_player(board, himax = -10):
        global explored_actions
      
      # check if game is over. if so, return point value of boars (1, -1, 0)
        if terminal(board):
            return (utility(board), None)

    #if game is still in play, pick action for X max value when O plays optmially
        val = 10
        bestact = None

    # from set of possible actions select one at random until list is empty
        actionset = actions(board)

   
        while len(actionset) > 0:
            action = random.choice(tuple(actionset))
            actionset.remove(action)
            if himax >= val:
                break

            explored_actions = explored_actions + 1
            maxresult = max_player(result(board, action), val)
            if maxresult[0] < val:
                bestact = action
                val = maxresult[0]
            return (val, bestact)

    # for terminal board, return None
        if terminal(board):
            return None


        #return the optimal move, based on alpha beta pruning 
        if player(board) == 'X':
            print("Considering next move")
            best_move = max_player(board)[1]
            print(explored_actions, "possible moves considered",)
            return best_move
        else:
            print("Considering next move")
            best_move = min_player(board)[1]
            print(explored_actions, "possible moves considered",)
            return best_move

    raise NotImplementedError


